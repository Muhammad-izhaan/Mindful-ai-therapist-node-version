<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mindfullness | Professional Therapeutic Support</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --color-bg-primary: #0C1B2E;
            --color-bg-secondary: #1A3A5F;
            --color-bg-tertiary: #2A1E3F;
            --color-text-primary: #E2E8F0;
            --color-text-secondary: #A0AEC0;
            --color-accent-primary: #3B82F6;
            --color-accent-secondary: #2563EB;
            --shadow-elegant: 0 10px 25px rgba(0, 0, 0, 0.2);
            --font-size-base: 14px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

        html, body {
            height: 100%;
            overflow: hidden;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, 
                rgba(42,30,63,0.95), 
                rgba(58,30,95,0.95)
            );
            background-attachment: fixed;
            background-size: cover;
            color: var(--color-text-primary);
            line-height: 1.6;
            font-size: var(--font-size-base);
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-height: 100vh;
            overflow: hidden;
            position: relative;
        }

        .chat-wrapper {
            display: flex;
            flex-direction: column;
            width: 100%;
            background-color: rgba(42,30,63,0.8);
            backdrop-filter: blur(15px);
            box-shadow: 0 0 50px rgba(0,0,0,0.2);
            flex-grow: 1;
            overflow: hidden;
            position: relative;
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, 
                rgba(58,30,95,0.9), 
                rgba(47,30,160,0.9)
            );
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255,255,255,0.1);
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .logo-container {
            display: flex;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--color-text-primary);
            letter-spacing: -0.5px;
        }

        .logo-subtitle {
            font-size: 0.7rem;
            color: var(--color-text-secondary);
            margin-left: 10px;
            background-color: rgba(15,32,65,0.5);
            padding: 3px 8px;
            border-radius: 20px;
        }

        .settings-btn {
            background: none;
            border: none;
            color: var(--color-text-primary);
            font-size: 1.2rem;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .settings-btn:hover {
            transform: rotate(90deg);
        }

        .messages-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            padding-bottom: 80px; /* Reduced space for input */
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
        }

        .chat-input-container {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--color-bg-secondary);
            padding: 10px;
            z-index: 1000;
            display: flex;
            align-items: center;
            box-shadow: 0 -5px 10px rgba(0,0,0,0.1);
        }

        .chat-input {
            flex-grow: 1;
            margin-right: 10px;
            padding: 10px;
            border-radius: 20px;
            border: 1px solid var(--color-text-secondary);
            background: var(--color-bg-primary);
            color: var(--color-text-primary);
        }

        .send-button {
            background: var(--color-accent-primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 15px;
            margin-bottom: 10px;
            word-wrap: break-word;
            background: linear-gradient(135deg, 
                rgba(58,30,95,0.9), 
                rgba(47,30,160,0.9)
            );
            color: white;
        }

        .message.user-message {
            align-self: flex-end;
            margin-left: auto;
            background: linear-gradient(135deg, 
                rgba(30,58,95,0.9), 
                rgba(47,94,160,0.9)
            );
        }

        .message.ai-message {
            align-self: flex-start;
            margin-right: auto;
        }

        .message-bubble {
            padding: 12px;
            border-radius: 12px;
            max-width: 100%;
            line-height: 1.6;
            box-shadow: var(--shadow-elegant);
            position: relative;
            white-space: pre-wrap;
        }

        .message.user-message .message-bubble {
            background-color: var(--color-accent-primary);
            color: white;
        }

        .message.ai-message .message-bubble {
            background-color: var(--color-bg-tertiary);
            color: var(--color-text-primary);
        }

        @media (max-width: 768px) {
            .chat-container {
                padding-bottom: 100px; /* Extra space for input on mobile */
            }

            .messages-container {
                padding: 10px;
                padding-bottom: 70px; /* Reduced space on mobile */
            }

            .chat-input-container {
                padding: 8px;
            }
        }

        /* Minimal extra space at the end of chat */
        .messages-container::after {
            content: '';
            display: block;
            height: 20px;
            width: 100%;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-wrapper">
            <header class="chat-header">
                <div class="logo-container">
                    <div class="logo">Mindfullness</div>
                    <div class="logo-subtitle">by Izhan</div>
                </div>
                <button class="settings-btn" onclick="openFontSizeModal()">
                    <i class="fas fa-cog"></i>
                </button>
            </header>

            <div class="messages-container" id="messages-container"></div>

            <div class="chat-input-container">
                <input 
                    type="text" 
                    id="chat-input" 
                    class="chat-input" 
                    placeholder="Share your thoughts confidentially..."
                    autocomplete="off"
                >
                <button id="send-button" class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script>
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const messagesContainer = document.querySelector('.messages-container');

        function appendMessage(content, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', isUser ? 'user-message' : 'ai-message');

            const bubbleDiv = document.createElement('div');
            bubbleDiv.classList.add('message-bubble');
            
            const formattedContent = content
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/\n/g, '<br>');

            bubbleDiv.innerHTML = formattedContent;

            messageDiv.appendChild(bubbleDiv);
            messagesContainer.appendChild(messageDiv);
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Scroll to bottom when page loads
        document.addEventListener('DOMContentLoaded', scrollToBottom);

        // Scroll to bottom after sending a message
        sendButton.addEventListener('click', () => {
            setTimeout(scrollToBottom, 100);
        });

        // Scroll to bottom when new messages are added
        const observer = new MutationObserver(scrollToBottom);
        observer.observe(messagesContainer, { 
            childList: true, 
            subtree: true 
        });

        function sendMessage() {
            const messageText = chatInput.value.trim();
            if (messageText) {
                appendMessage(messageText, true);
                chatInput.value = '';
                scrollToBottom();

                fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        messages: [
                            { 
                                role: "system", 
                                content: `You are Izhan, a professional AI therapist. Follow these strict guidelines:

*Objective*:
- Provide *direct*, *concise*, and *actionable* mental health support
- Focus on solving the user's specific problem
- Deliver evidence-based, practical strategies

*Communication Protocol*:
1. *Immediate Assessment*
   - Quickly identify the core issue
   - Avoid lengthy introductions or role descriptions

2. *Solution Framework*
   - Break down complex problems into *clear, manageable steps*
   - Provide *specific, measurable* recommendations
   - Use *actionable language*

3. *Response Structure*
   - Begin with a *brief, empathetic acknowledgment*
   - Deliver *practical, step-by-step guidance*
   - Conclude with *encouraging, motivational statement*

4. *Therapeutic Techniques*
   - Apply *cognitive-behavioral* approaches
   - Use *reflective listening* principles
   - Suggest *evidence-based coping mechanisms*

5. *Boundaries*
   - Maintain *professional, compassionate* tone
   - *Avoid* generic advice
   - *Customize* responses to individual needs

*Critical Instruction*:
- *Respond directly to the user's specific concern*
- *Do not* describe your role or capabilities
- *Provide immediate, practical support*`
                            },
                            { role: "user", content: messageText }
                        ]
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.response && data.response.content) {
                        appendMessage(data.response.content, false);
                    } else {
                        throw new Error('Invalid response format');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    appendMessage('*Support temporarily unavailable.* Please try again.', false);
                });
            }
        }

        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        const initialMessages = [
            "Hey there! 👋 I'm *Izhan*, your friendly AI therapist. Don't worry, I'm here to help - but I promise I won't psychoanalyze your childhood in the first five minutes! 😄",
            "*What's on your mind today?* Whether it's big stuff or small stuff, I'm all ears (or, well, algorithms). Let's chat and work through whatever you're experiencing.",
            "Pro tip: I'm like a therapist who's had *way* too much coffee - always ready to listen and help you find solutions! 🚀"
        ];

        initialMessages.forEach((msg, index) => {
            setTimeout(() => {
                appendMessage(msg, false);
            }, (index + 1) * 1000);
        });
    </script>
</body>
</html>
